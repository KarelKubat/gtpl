#!/usr/bin/env perl

use strict;

my ($codetag, $srcfile);
# More supported codetag sources may be added here.
my @sources = qw(gittag/gittag.go);
for $srcfile (@sources) {
    if (-f $srcfile) {
        # Expect a line with `Version = "v1.0.0"`
        open(my $if, $srcfile) or die("gittag: cannot read $srcfile: $!\n");
        while (my $line = <$if>) {
            chomp($line);
            if ($line =~ m{Version}) {
                $line =~ s{.*Version[ =]*}{};
                $line =~ s{"}{}g;
                $codetag = $line;
                last;
            }
        }
    }
    last if ($codetag ne "");
}

die("gittag: cannot determine the code tag from $srcfile\n") if ($codetag eq "");
print("gittag: codetag found in $srcfile is $codetag\n");
# Require v.NR.NR.NR
if ($codetag !~ m{v[0-9]+\.[0-9]+\.[0-9]+}) {
    die("gittag: $codetag must follow the format v.NR.NR\n");
}

my $gittag;
open(my $if, "git tag |") or die("gittag: cannot start git tag: $!\n");
while (my $line = <$if>) {
    chomp($line);
    if ($line ne "") {
        $gittag = $line;
    }
}

if ($gittag eq '') {
    die("gittag: no git tag is set yet, do so using:\n",
        "        git tag -a $codetag -m 'first tagged version'\n");
}
print("gittag: repository tag: $gittag\n");

if ($gittag ne $codetag) {
    die("gittag: codetag $codetag and repository tag $gittag don't match\n",
        "        either update $srcfile or run:\n",
        "        git tag -a $codetag -m 'tagged as $codetag'\n");
}

print("gittag: codetag and repository tag agree, don't forget to:\n",
      "        git push origin\n",
      "        git push origion $codetag\n");
